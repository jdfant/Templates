name: opentofu-action
description: Configures and runs OpenTofu
inputs:
  GITHUB_TOKEN:
    description: The github token to use to make commits
    required: true
  EVENT_NAME:
    description: The name of the github event
    required: true
  ACTOR:
    description: The name of whoever triggered the github action
    required: true
  REF:
    description: The name of the Github Commit Reference
    required: true
  ACCT_NUM:
    description: The number of the AWS account
    required: true
  ACCT_NAME:
    description: The name of the AWS account
    required: true
  WORK_DIR:
    description: The OpenTofu working directory
    required: true
runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: "arn:aws:iam::${{ inputs.ACCT_NUM }}:role/${{ inputs.ACCT_NAME }}-github-service-role"
        aws-region: us-west-1

    - uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.7.2

    - name: OpenTofu Fmt
      id: fmt
      shell: bash
      working-directory: ${{ inputs.WORK_DIR }}
      run: tofu fmt

    - name: Auto Commit Changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "tofu fmt"
        file_pattern: "*.tf"
        commit_user_name: "github-actions[bot]"

    - name: OpenTofu Init
      id: init
      shell: bash
      working-directory: ${{ inputs.WORK_DIR }}
      run: tofu init -no-color -input=false

    - name: OpenTofu Init Status
      if: steps.init.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: OpenTofu Validate
      id: validate
      shell: bash
      working-directory: ${{ inputs.WORK_DIR }}
      run: tofu validate -no-color

    - name: OpenTofu Plan
      id: plan
      shell: bash
      working-directory: ${{ inputs.WORK_DIR }}
      run: tofu plan -no-color -input=false -detailed-exitcode
      continue-on-error: true

    - name: OpenTofu Plan Status
      if: steps.plan.outcome == 'failure'
      shell: bash
      run: exit 1

    - uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "opentofu\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('opentofu Format and Style')
          })
          // 2. Prepare format of the comment
          const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          </details>
          #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.WORK_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }

    - name: OpenTofu Apply
      id: apply
      working-directory: ${{ inputs.WORK_DIR }}
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      shell: bash
      run: tofu apply -no-color -auto-approve -input=false
      continue-on-error: true